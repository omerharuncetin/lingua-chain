// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User table
model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  username      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  progress     UserProgress[]
  leaderboard  LeaderboardEntry[]
  avatars      UserAvatar[]
  certificates Certificate[]
  badges       Badge[]
  dailyLessons DailyLessonRecord[] // User's daily lesson records

  // Equipped Avatar
  equippedAvatarId String?     @unique // @unique because a UserAvatar can only be equipped by one User.
  // If UserAvatar could be shared and equipped by many, this wouldn't be unique.
  // But UserAvatar is user-specific, so this implies a User has one equipped UserAvatar.
  equippedAvatar   UserAvatar? @relation("EquippedUserAvatar", fields: [equippedAvatarId], references: [id])
}

// DailyLessonRecord table
// Tracks how many lessons a user has completed on a specific day
model DailyLessonRecord {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date             DateTime @db.Date // Stores only the date part, effectively tracking by day
  lessonsCompleted Int      @default(0)
  blobId           String   @default("")

  @@unique([userId, date]) // A user has one lesson record per day
}

// UserProgress table
model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  language  String // e.g., "A1", "A2"
  lesson    Int // Current lesson number (1-10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blobId    String   @default("")

  @@unique([userId, language])
}

// LeaderboardEntry table
model LeaderboardEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  language  String // "A1", "A2", ..., "ALL"
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, language])
}

// Avatar table (NFTs for marketplace)
model Avatar {
  id              String   @id @default(cuid())
  name            String   @unique // e.g., "LingoBot", "Polyglot Panda"
  description     String? // Can be used for the "theme"
  price           Float // Price in USDC
  imageUrl        String? // URL to the avatar image e.g., /images/nfts/avatars/lingobot.png
  lessons         Int // Custom attribute: number of lessons this avatar might grant or relate to
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  blockchainIndex Int

  ownedBy UserAvatar[]
}

// UserAvatar table (junction table for User and Avatar)
model UserAvatar {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarId     String
  avatar       Avatar   @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  purchaseDate DateTime @default(now())

  equippedByUsers User[] @relation("EquippedUserAvatar") // Inverse relation for equippedAvatar on User

  @@unique([userId, avatarId])
}

// Certificate table
model Certificate {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  languageLevel   String // e.g., "A1", "A2"
  issueDate       DateTime @default(now())
  certificateUrl  String // URL to the certificate image/NFT metadata
  tokenId         String // The NFT token ID from the event
  transactionHash String   @default("test") // transaction hash
  // If a user could have multiple distinct tokens for the same level, this unique constraint would need tokenId.
  // For now, assuming the above is fine and the listener handles logic if a new token for an existing level is minted.

  @@unique([userId, languageLevel]) // Assuming one certificate per user per level
}

// Badge table
model Badge {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  languageLevel   String // e.g., "A1", "A2"
  issueDate       DateTime @default(now())
  badgeUrl        String // URL to the badge image/NFT metadata
  tokenId         String // The NFT token ID from the event
  transactionHash String   @default("test") // transaction hash

  @@unique([userId, languageLevel]) // Assuming one badge per user per level
}

model WalrusBlob {
  id          String   @id @default(cuid())
  blobId      String   @unique
  objectId    String?
  name        String?
  description String?
  tags        String[] @default([])
  userId      String?
  size        Int
  cost        Int?
  startEpoch  Int?
  endEpoch    Int?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("walrus_blobs")
}
